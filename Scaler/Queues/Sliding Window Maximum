
Problem:
Problem Description
Given an array of integers A. There is a sliding window of size B, moving from the very left of the array to the very right. You can only see the B numbers in the window. Each time the sliding window moves rightwards by one position. You have to find the maximum for each window.

Return an array C, where C[i] is the maximum value in the array from A[i] to A[i+B-1].

Refer to the given example for clarity.

NOTE: If B > length of the array, return 1 element with the max of the array.

Link: https://www.scaler.com/academy/mentee-dashboard/class/34910/assignment/problems/50/?navref=cl_pb_nv_tb
Solution:
module.exports = { 
 //param A : array of integers
 //param B : integer
 //return a array of integers
	slidingMaximum : function(A, B){
        let n = A.length
        let queue = []
        let ans = []
       
        for(let i=0;i<n;i++){
            
           
            while(queue.length > 0 && A[i] > queue[queue.length-1][1] ){
                let a = queue.pop()
                //console.log(a)
            }
            queue.push([i,A[i]])
            while(queue.length > 0 && (queue[0][1]< queue[queue.length-1][1] || (i >= B && i-queue[0][0] >= B))){
                queue.shift()
            }
            if(queue.length > 0 && i >=B-1){
                ans.push(queue[0][1])
            }
            

        }
        return ans

	}
};
