//Link: https://leetcode.com/problems/number-of-distinct-islands/
//You are given an m x n binary matrix grid. An island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.

//An island is considered to be the same as another if and only if one island can be translated (and not rotated or reflected) to equal the other.

//Return the number of distinct islands.
/**
 * @param {number[][]} grid
 * @return {number}
 */
var numDistinctIslands = function(board) {
    let n = board.length
    let m = board[0].length
    let visited = new Array(n).fill(-1).map(()=>new Array(m).fill(-1))
    let set = new Set()
   // console.log(visited)
    for(let i=0;i<n;i++){
        for(let j=0;j<m;j++){
         if( board[i][j] === 1 && visited[i][j] == -1) 
         {  let list = []
            let obj = {
             "list":list
                }
            console.log(i,j)
            dfs(i,j,obj) 
         // console.log(obj.list)
            let newList = updateList(obj.list)
           // console.log(newList)
            set.add(newList.toString())
            }   
        }
    }
    
    return set.size
    
    function updateList(list){
        let baserow = list[0][0]
        let basecol = list[0][1]
        let n = list.length
        for(let i=0;i<n;i++){
            list[i][0] = list[i][0]-baserow
            list[i][1] = list[i][1]-basecol
        }
        
        return list
    }
    
    function dfs(row,col,obj){
        let delrow = [1,0,-1,0]
        let delcol = [0,1,0,-1]
        visited[row][col] = 1
        obj.list.push([row,col])        
        for(let k=0;k<4;k++){
            let nrow = row+delrow[k]
            let ncol = col+delcol[k]
            
            if(nrow< n && ncol <m && nrow >=0 && ncol >=0 && visited[nrow][ncol] ==-1 && board[nrow][ncol] == '1'){
                dfs(nrow,ncol,obj)
            }
            
            
            
        }
        return
        
        
    }
    
};