/*
Hashmap works in java internally
- put(key,val) => key -> val
- get(key)

multiple threads

crticial block


cput(key,val)
cget(key)

how 
-> Dependency Injection
-> Bean , scopes
->  Bean life cycle in Spring Bean Factory Container.
-> Bean Wiring
-> @SpringBootApplication annotation do internally
-> What are the possible sources of external configuration?
-> equals and hashcode
-> volatile keyword ?
-> singleton class

[2, 3 -5]
--->.2  ->>>3   <<----5
val - mass
sign - direction 
+ve -> left to right
-ve -> right to left

[2, -5]

[-5] -> return 

[8, -8] -> [] 

[-2, 2] -> [-2, 2]

2,3,-4,6,-5,1 -> [2, 3,6 ,1]

2,4,-7.-8
      5  -5  -7-8



rmax -> 2, 3, -5 


lmax -> 2 3 -1
        2 3 


*/

(function main() {
  const readline = require("readline");
  const r1 = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });
  
  var solution = function(s) {
    // write your solution here..
    //let arr = [2,3,-4,6,-5,1] // 6,1
    let arr = [2,3,-5]
    let n = arr.length
    //let output = []

    for(let i=0;i<n;i++){
        for(let j=i+1;j<n;j++){
            
            if(arr[i] > 0 && arr[j] < 0){
                if(Math.abs(arr[i]) > Math.abs(arr[j])){//Positive element is greated than negative element delete negative
                    arr.splice(j,1)
                }else if(Math.abs(arr[i]) == Math.abs(arr[j])){//positive and negative both are same
                    arr.splice(i,1)
                    arr.splice(j,1)
                }else{//Negative element is greater then positive element delete positive element
                    arr.splice(i,1)
                    break
                }
            }
        }
    }
    return arr
  };
 
  var n, k;
  r1.on("line", (input) => {
    n = input;
  }).on("close", () => {
    console.log(solution(n));
  });
})();
