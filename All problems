Q1) Set Matrix Zeroes : Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's.

Answer:Loop 1: Iterate on array and copy index in hashmap if matrix[i][j] == 0
       Loop 2: Iterate on array if hashmap has i or j set element equal to 0

Q2) Next Permutation : A permutation of an array of integers is an arrangement of its members into a sequence or linear order.

Answer:Loop 1: swapIndex1 => To find out break point from end of the array nums[i]>nums[i-1].  ::   if(nums[i]>nums[i-1]) => swapIndex1 = i-1.  
       Loop 2: swapIndex2 => To find out sightly greater number than nums[swapIndex1] on right side of breakpoint         ::   nums[i]>nums[swapIndex1]
       If there is no break point return reversed array as output no swapping required         ::   swapIndex1 == 0 && swapIndex2 == 0
       Else Swap numbers on SwapIndex1 and SwapIndex2  and reverse array from breakpoint       ::   Swap(nums,swapIndex1,swapIndex2)  reverse(nums,swapIndex1+1,nums.length-1)
       
Q3)Sort an array of 0’s 1’s 2’s
 
 Answer: Initiate low mid with zero and high with n-1
         Switch case 0) nums = swap(nums,mid,low);
                        low = low +1;
                        mid = mid +1
                case 1) mid = mid +1
                case 2) nums = swap(nums,mid,high)
                        high = high -1
                     
Q4) Rotate Matrix : You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).

Answer: Loop1: Transver Matrix rows replace columns ,columns replace rows
        Loop2: Reverse Matrix

Q5)* Merge Sorted Array :You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.

Merge nums1 and nums2 into a single array sorted in non-decreasing order.
        
Answer:
function swap(arr,arr1,i){
    let temp =arr[i]
    arr[i] = arr1[0]
    arr1[0] = temp 
    return arr,arr1
    
}
var merge = function(nums1, m, nums2, n) {

    console.log(nums1,nums2)
    while(nums1.length >m){
            nums1.pop()
            
        }
    while(nums2.length >n){
            nums2.pop()
            
        }
    for(let i=0;i<nums1.length;i++){
       //
        if(nums1[i] > nums2[0]){
            nums1,nums2 = swap(nums1,nums2,i)
            nums2.sort(function(a,b){return a-b})
        }
    }
    console.log(nums1,nums2)
     for(let i=0;i<n;i++){
        
            nums1.push(nums2[i])
         
     }
    
};

Q6)* Find the Duplicate Number:Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.

There is only one repeated number in nums, return this repeated number.

You must solve the problem without modifying the array nums and uses only constant extra space.

Answer:
Solve using hashmap

Q7)Merge Intervals:Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.

var merge = function(intervals) {
    let i =0 
    intervals.sort(function(a,b){return a[0] - b[0]})
    let intervalsout = [intervals[0]]
    if(intervals.length == 1){
        return intervals
    }
    while(i < intervals.length){
        if(intervalsout[intervalsout.length-1][1] >=intervals[i][0]){
            if(intervalsout[intervalsout.length-1][1] <= intervals[i][1] ){
                  // console.log(intervalsout[intervalsout.length-1][1],intervals[i][1]) 
                intervalsout[intervalsout.length-1][1] = intervals[i][1]
            }
            
        }else{
            intervalsout.push(intervals[i])
            
        }
          i += 1
          }
    
    return intervalsout
};


     
