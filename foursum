/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number[][]}
 */

function binarySearch(nums,element,i,j){
    
    while(i<j){
        
        let mid = i+Math.floor((j-i)/2)
        //console.log(nums,element,i,j,mid,nums[mid])
        if(nums[mid]== element){
            return true          
        } else if(element > nums[mid] ){
            i +=1
        } else if (element < nums[mid]){
            j -=1
        } /*else {
            i +=1
            j -=1
        }*/
    }
    return false
    
}
var fourSum = function(nums, target) {
    
    nums.sort(function(a,b){return a-b})
    //console.log(nums)
    let quadruplets = []
    let hashmap = {}
    for(let i=0;i<nums.length;i++){
        for(let j=i+1;j<nums.length;j++){
            for(let k=j+1;k<nums.length;k++){
                //console.log(i,j,k)
                let element = target - nums[k]-nums[j]-nums[i]
                //console.log(nums,element,k+1,nums.length-1)
                
        if(binarySearch(nums,element,k+1,nums.length)){
            
            //console.log(quadruplets,quadruplets.includes([nums[i],nums[j],nums[k],element]))
                    //console.log(hashmap[string])
                    let string = `${nums[i]},${nums[j]},${nums[k]},${element}`
                    
                    
                    if(!hashmap.hasOwnProperty(string)){
                        quadruplets.push([nums[i],nums[j],nums[k],element])
                        hashmap[string] = "true"
                    }               
               }
        }
        }
        
    } 
    return quadruplets
   
    
};
