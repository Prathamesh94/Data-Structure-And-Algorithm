Link: https://www.scaler.com/academy/mentee-dashboard/class/34906/assignment/problems/9014/?navref=cl_pb_nv_tb

Problem Description
A CPU has N tasks to be performed. It is to be noted that the tasks have to be completed in a specific order to avoid deadlock. In every clock cycle, the CPU can either perform a task or move it to the back of the queue. You are given the current state of the scheduler queue in array A and the required order of the tasks in array B.

Determine the minimum number of clock cycles to complete all the tasks.

Solution:
module.exports = { 
 //param A : array of integers
 //param B : array of integers
 //return an integer
	solve : function(A, B){
        let n = B.length
        let cpuCycle = 0
        for(let i=0;i<n;i++){
            while(A[0] != B[i]){
                let a = A.shift()
                A.push(a)
                cpuCycle += 1
               // console.log(A[0])
            }
            A.shift()
            cpuCycle += 1
        }
        return cpuCycle

	}
};
