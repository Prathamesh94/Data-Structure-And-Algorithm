Link: https://leetcode.com/problems/rotting-oranges/

You are given an m x n grid where each cell can have one of three values:

0 representing an empty cell,
1 representing a fresh orange, or
2 representing a rotten orange.
Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1

Solution:
var orangesRotting = function(grid) {
    let queue = []
    let n = grid.length
    let m = grid[0].length
    let vis = []
    let delrow = [-1,0,1,0]
    let delcol = [0,1,0,-1]
    for(let i=0;i<n;i++){
        vis.push([])
        for(let j=0;j<m;j++){
            vis[i].push(-1)
            if(grid[i][j] == 2) {
                queue.push([i,j])
                vis[i][j]= 2
            }
        }
    }
    
    let count =0
    while(queue.length != 0){
        
        let currQueue = [...queue]
        queue.shift()
        let flag = false
        while(currQueue.length != 0){
            let front = currQueue.shift()
            
            let row = front[0]
            let col = front[1]
            for(let i=0;i<4;i++){
                let nrow = row+delrow[i]
                let ncol = col+delcol[i]
                if(nrow <n && nrow >=0 && ncol <m && ncol >=0 && grid[nrow][ncol] == 1 && vis[nrow][ncol] == -1){
                    flag = true
                    vis[nrow][ncol] =2
                    
                    queue.push([nrow,ncol])
                    
                   }
                    
            }
        
        }

        if(flag) count += 1
          
    }

    for(let i=0;i<n;i++){
        for(let j=0;j<m;j++){
         if (grid[i][j] ==1 && vis[i][j] != 2) return -1   
            
        }
    }
    return count
    
    
};