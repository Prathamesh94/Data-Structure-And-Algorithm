An integer array original is transformed into a doubled array changed by appending twice the value of every element in original, and then randomly shuffling the resulting array.

Given an array changed, return original if changed is a doubled array. If changed is not a doubled array, return an empty array. The elements in original may be returned in any order.

Solution:
var findOriginalArray = function(changed) {
    let n = changed.length
    let hashmap = {}
    if(n%2 != 0) return []
    for(let i=0;i<n;i++){
        if(hashmap.hasOwnProperty(changed[i])){
            hashmap[changed[i]] +=1
           
           }else{
            hashmap[changed[i]] =1
        }        
    }
    let ans = []
    //console.log(hashmap)
    for(let i=0;i<n;i++){
        //console
        if(changed[i]%2 !=0 && hashmap.hasOwnProperty(changed[i]*2) && hashmap[changed[i]] > 0){
            //console.log(hashmap,changed[i])
            hashmap[changed[i]] -= 1
            if (hashmap[changed[i]] == 0) delete hashmap[changed[i]]
            hashmap[changed[i]*2] -= 1
            if (hashmap[changed[i]*2] == 0) delete hashmap[changed[i]*2]
            ans.push(changed[i])
           }
    }
   // console.log(hashmap,ans)
    for(key in hashmap){
       // console.log(changed[i]*2,hashmap)
        if(hashmap.hasOwnProperty(key*2) && hashmap[key*2] > 0 && hashmap.hasOwnProperty(key) && hashmap[key] > 0 && key != 0)         {
            
            while(hashmap[key] > 0  && hashmap[key*2] > 0){
                
            hashmap[key*2] -=1
            hashmap[key] -= 1
            ans.push(key)
                  }
            
           
           }
        if(key == 0 && hashmap.hasOwnProperty(key) && hashmap[key*2] > 1)           {
           while(hashmap[key] > 1  && hashmap[key*2] > 1){
                
            hashmap[key*2] -=1
            hashmap[key] -= 1
            ans.push(key)
                  }
           }
    }

    
   // console.log(hashmap,ans)
    if (ans.length  == changed.length/2) return ans
    return []
    
};