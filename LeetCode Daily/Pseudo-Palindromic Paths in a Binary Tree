Problem:
/*Given a binary tree where node values are digits from 1 to 9. A path in the binary tree is said to be pseudo-palindromic if at least one permutation of the node values in the path is a palindrome.

Return the number of pseudo-palindromic paths going from the root node to leaf nodes.

Link: "https://leetcode.com/problems/pseudo-palindromic-paths-in-a-binary-tree/"
*   /


Solution:

/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number}
 */
var pseudoPalindromicPaths  = function(root) { 
    const dfs = (node, set) => {
        if(!node) return 0;
        
        if(set.has(node.val)) {
            set.delete(node.val)
        } else {
            set.add(node.val)
        }
        
        if(!node.left && !node.right) {
            return set.size <= 1 ? 1: 0;
        }        
        
        let left = dfs(node.left, new Set([...set]));
        let right = dfs(node.right, new Set([...set]));
        
        return left + right;
    }
    return dfs(root, new Set());     
}; 