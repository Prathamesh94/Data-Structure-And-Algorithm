Q1) Maximum Absolute Difference: You are given an array of N integers, A1, A2, .... AN.

Return the maximum value of f(i, j) for all 1 ≤ i, j ≤ N. f(i, j) is defined as |A[i] - A[j]| + |i - j|, where |x| denotes absolute value of x.

Answer:
f(i, j) = |A[i] - A[j]| + |i - j| can be written in 4 ways (Since we are looking at max value, we don’t even care if the value becomes negative as long as we are also covering the max value in some way).

(A[i] + i) - (A[j] + j)
-(A[i] - i) + (A[j] - j) 
(A[i] - i) - (A[j] - j) 
(-A[i] - i) + (A[j] + j) = -(A[i] + i) + (A[j] + j)
Note that case 1 and 4 are equivalent and so are case 2 and 3.

We can construct two arrays with values: A[i] + i and A[i] - i. Then, for the above 2 cases, we find the maximum value possible. For that, we just have to store minimum and maximum values of expressions A[i] + i and A[i] - i for all i


Code:

module.exports = { 
 //param A : array of integers
 //return an integer
	maxArr : function(A){
        let a = Number.MAX_SAFE_INTEGER, b = Number.MAX_SAFE_INTEGER;
        let c = Number.MIN_SAFE_INTEGER, d = Number.MIN_SAFE_INTEGER;
        
        let id = 0;
        A.forEach(ele => {
           id++;
           a = Math.min(a, ele - id);
           b = Math.min(b, ele + id);
           c = Math.max(c, ele - id);
           d = Math.max(d, ele + id);
        });
        return Math.max(c - a, d - b);
	}
};

----------------------------------------------------------------------------------------------------------------------------------------------------------------------

Q2)  Max Sum Contiguous Subarray : Find the contiguous non-empty subarray within an array, A of length N, with the largest sum.


Answer:

code:
module.exports = { 
 //param A : array of integers
 //return an integer
	maxSubArray : function(A){
        let max = -1000000000, sum = 0;
        for(let i = 0; i < A.length; i++){
            sum = Math.max(A[i], A[i] + sum);
            max = Math.max(max, sum);
        }
        return max;
	}
};


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Q4)Problem Description
You are given a binary string A(i.e., with characters 0 and 1) consisting of characters A1, A2, ..., AN. In a single operation, you can choose two indices, L and R, such that 1 ≤ L ≤ R ≤ N and flip the characters AL, AL+1, ..., AR. By flipping, we mean changing character 0 to 1 and vice-versa.

Your aim is to perform ATMOST one operation such that in the final string number of 1s is maximized.

If you don't want to perform the operation, return an empty array. Else, return an array consisting of two elements denoting L and R. If there are multiple solutions, return the lexicographically smallest pair of L and R.

NOTE: Pair (a, b) is lexicographically smaller than pair (c, d) if a < c or, if a == c and b < d.


module.exports = {
  flip: function (A) {
    A = [...A].map((ele) => (+ele == 1 ? -1 : 1));
	let a = -1, b = 0, sum = 0, cur = 0, s = 0;
    console.log(A)
	for(let i = 0; i < A.length;i++){
		sum += A[i];
		if(sum > cur){
			cur = sum;
			a = s;
			b = i;
		}
		else if(sum < 0){
			sum = 0;
			s = i + 1;
		}
	}
	if(a == -1)return [];
	else return [a + 1, b + 1];
  },
};

TC = O(N)
SC = O(1)

----------------------------------------------------------------------------------------------------------------------------------------------------------------------

Q4)Problem Description
Link: https://www.scaler.com/academy/mentee-dashboard/class/29453/assignment/problems/440/hints?navref=cl_pb_nv_tb
There are A beggars sitting in a row outside a temple. Each beggar initially has an empty pot. When the devotees come to the temple, they donate some amount of coins to these beggars. Each devotee gives a fixed amount of coin(according to their faith and ability) to some K beggars sitting next to each other.

Given the amount P donated by each devotee to the beggars ranging from L to R index, where 1 <= L <= R <= A, find out the final amount of money in each beggar's pot at the end of the day, provided they don't fill their pots by any other means.
For ith devotee B[i][0] = L, B[i][1] = R, B[i][2] = P, Given by the 2D array B



Approach:
Instead of updating each beggar ranging from i to j, we could update index i with +S and index j + 1 with -S, where S is a donation made by some devotee. So if you want to know the number of coins taken by kth beggar, you just need to find the prefix sum of all the values(coins) from 1 to k(Try to prove it by yourself that values between i to j contains +S as you are doing prefix sum).

Example:
N = 5, D = [[1, 2, 10], [2, 3, 20], [2, 5, 25]]
Initial array: [0, 0, 0, 0, 0]

After first devotee, if we update i = 1 with +10 and j + 1 = 3 with -10, we get [10, 0, -10, 0, 0]. Now note that if you add 10 to 1st index and subtract 10 with 3rd index and do a prefix sum at every array element, you will get +10 at 1st and 2nd.
After second devotee, if we update i = 2 with +20 and j + 1 = 4 with -20, we get [10, 20, -10, -20, 0].
Similarly, after third devotee, if we update i = 2 with +25 and j + 1 = 6 with -25, we get [10, 45, -10, -20, 0].
Now, if we calculate the prefix sum at every index, we get [10, 55, 45, 25, 25].

Naive Approach:

module.exports = { 
 //param A : integer
 //param B : array of array of integers
 //return a array of integers
	solve : function(A, B){
        let beggars = Array(A).fill(0);
        B.forEach((devotee)=>{
            //console.log(devotee)
            for(let i=devotee[0];i<=devotee[1];i++){
                beggars[i-1] += devotee[2]

            }
        })
        return beggars
	}
};

Optimized Apporach:
Intuition:

Instead of updating each beggar ranging from i to j, we could update index i with +S and index j + 1 with -S, where S is a donation made by some devotee. So if you want to know the number of coins taken by kth beggar, you just need to find the prefix sum of all the values(coins) from 1 to k(Try to prove it by yourself that values between i to j contains +S as you are doing prefix sum).

Example:
N = 5, D = [[1, 2, 10], [2, 3, 20], [2, 5, 25]]
Initial array: [0, 0, 0, 0, 0]

After first devotee, if we update i = 1 with +10 and j + 1 = 3 with -10, we get [10, 0, -10, 0, 0]. Now note that if you add 10 to 1st index and subtract 10 with 3rd index and do a prefix sum at every array element, you will get +10 at 1st and 2nd.
After second devotee, if we update i = 2 with +20 and j + 1 = 4 with -20, we get [10, 20, -10, -20, 0].
Similarly, after third devotee, if we update i = 2 with +25 and j + 1 = 6 with -25, we get [10, 45, -10, -20, 0].
Now, if we calculate the prefix sum at every index, we get [10, 55, 45, 25, 25].




module.exports = { 
 //param A : integer
 //param B : array of array of integers
 //return a array of integers
	solve : function(A, B){
	    
	    let ans = [];
	    let n = B.length;
	    for(i = 0; i < A; i++) {
	        ans.push(0);
	    }
	    for(let i = 0; i < n; i++) {
	        
	        let l = B[i][0], r = B[i][1], val = B[i][2];
	        ans[l-1] += val;
	        if(r < A)
	            ans[r]-=val;
	    }
	    for(let i = 1; i < A; i++)
	        ans[i] += ans[i-1];
	    return ans;

	}
};

TC = O(N+A)
SC = (1)


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


Q5)Add One To Number
Problem Description
Given a non-negative number represented as an array of digits, add 1 to the number ( increment the number represented by the digits ).

The digits are stored such that the most significant digit is at the head of the list.

NOTE: Certain things are intentionally left unclear in this question which you should practice asking the interviewer. For example: for this problem, the following are some good questions to ask :

Q: Can the input have 0's before the most significant digit. Or, in other words, is 0 1 2 3 a valid input?
A: For the purpose of this question, YES
Q: Can the output have 0's before the most significant digit? Or, in other words, is 0 1 2 4 a valid output?
A: For the purpose of this question, NO. Even if the input has zeroes before the most significant digit.


Solution:
module.exports = { 
 //param A : array of integers
 //return a array of integers
	plusOne : function(A){

        let n = A.length
        let carryForward = 1
        
        for(currentD =n-1;currentD>=0;currentD-- ){
            let sum = A[currentD] + carryForward
            if(sum>9){
                A[currentD] = 0
                if(currentD == 0){
                   A.unshift(1)
                }
            }else{
                A[currentD] = sum
                carryForward = 0
                break;
            }
        }
        //console.log(A)
        while(A[0] === 0) A.shift()
        return A
	}
};

TC = O(N)
SC = O(1)
